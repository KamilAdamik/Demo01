namespace: LFV24
operation:
  name: generate_barcodes2pdf
  inputs:
    - asset_tags_str
    - pdf_output_path
    - max_barcodes_per_page: '3'
  python_action:
    use_jython: false
    script: "def execute(asset_tags_str, pdf_output_path, max_barcodes_per_page):\r\n    import os\r\n    from reportlab.lib.pagesizes import letter\r\n    from reportlab.pdfgen import canvas\r\n    from barcode import generate\r\n    from barcode.writer import ImageWriter\r\n    import json\r\n\r\n    try:\r\n        # Parse the JSON string to extract the asset tags list\r\n        asset_tags = json.loads(asset_tags_str)\r\n\r\n        # Create a temporary directory for storing barcode images\r\n        temp_dir = os.path.join(os.path.dirname(pdf_output_path), 'barcode_temp')\r\n        os.makedirs(temp_dir, exist_ok=True)\r\n\r\n        # Generate barcode images for each asset tag\r\n        barcode_paths = []\r\n        for tag in asset_tags:\r\n            barcode_path = os.path.join(temp_dir, f'{tag}')\r\n            generate('code128', tag, writer=ImageWriter(), output=barcode_path)\r\n            barcode_path_ext = barcode_path + \".png\" \r\n            barcode_paths.append(barcode_path_ext)\r\n\r\n        # Create the PDF file and add barcodes to it\r\n        c = canvas.Canvas(pdf_output_path, pagesize=letter)\r\n        x_offset = 200  # X-coordinate offset for placing barcodes\r\n        y_offset = 580  # Initial Y-coordinate offset for placing barcodes\r\n        barcode_width = 200  # Width of each barcode image\r\n        barcode_height = 100  # Height of each barcode image\r\n        vertical_spacing = 120  # Vertical spacing between barcodes\r\n\r\n        if int(max_barcodes_per_page) > 5:\r\n            max_barcodes_per_page = 5\r\n\r\n        # Loop through each barcode path\r\n        for idx, barcode_path in enumerate(barcode_paths, start=1):\r\n            # Calculate coordinates to place the barcode on the page\r\n            x_position = x_offset\r\n            y_position = y_offset - ((idx - 1) % int(max_barcodes_per_page)) * vertical_spacing\r\n\r\n            # Draw the barcode on the canvas\r\n            c.drawImage(barcode_path, x_position, y_position, width=barcode_width, height=barcode_height)\r\n\r\n            # Check if it's time to move to the next page\r\n            if idx % int(max_barcodes_per_page) == 0:\r\n                c.showPage()  # Insert page break\r\n                \r\n        # Save the PDF file\r\n        c.save()\r\n\r\n        # Remove temporary barcode images\r\n        for barcode_path in barcode_paths:\r\n            os.remove(barcode_path)\r\n\r\n        return {\"result\":\"PDF with barcodes generated successfully.\"}\r\n\r\n    except Exception as e:\r\n        return {\"result\":\"Error: {}\".format(str(e))}"
  outputs:
    - result
  results:
    - SUCCESS
