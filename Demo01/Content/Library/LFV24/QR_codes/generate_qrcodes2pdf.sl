namespace: LFV24.QR_codes
operation:
  name: generate_qrcodes2pdf
  inputs:
    - asset_tags_str
    - pdf_output_path
  python_action:
    use_jython: false
    script: "import os\r\nfrom reportlab.lib.pagesizes import A4\r\nfrom reportlab.lib.units import mm\r\nfrom reportlab.pdfgen import canvas\r\nimport json\r\nimport qrcode\r\nfrom datetime import datetime\r\n\r\ndef execute(asset_tags_str, pdf_output_path):\r\n    try:\r\n        # Parse the JSON string to extract the asset tags list\r\n        asset_tags = json.loads(asset_tags_str)\r\n\r\n        # Define page size and margins\r\n        page_width, page_height = A4\r\n        top_margin = 12 * mm\r\n        bottom_margin = 12 * mm\r\n        left_margin = 17 * mm\r\n        right_margin = 17 * mm\r\n\r\n        # Define label size and spacing\r\n        label_width = 39 * mm\r\n        label_height = 17.6 * mm\r\n        qr_size = 10 * mm  # QR code size\r\n        horizontal_spacing = 7 * mm\r\n        vertical_spacing = 0 * mm\r\n\r\n        # Calculate available width and height for labels\r\n        available_width = page_width - left_margin - right_margin\r\n        available_height = page_height - top_margin - bottom_margin\r\n\r\n        # Create the 'qr_codes_temp' subfolder as a subfolder of pdf_output_path\r\n        qr_codes_folder = os.path.join(os.path.dirname(pdf_output_path), 'qr_codes_temp')\r\n        if not os.path.exists(qr_codes_folder):\r\n            os.makedirs(qr_codes_folder)\r\n\r\n        # Create the PDF file\r\n        c = canvas.Canvas(pdf_output_path, pagesize=A4)\r\n\r\n        # Calculate number of rows and columns per page\r\n        rows_per_page = 16\r\n        columns_per_page = 4\r\n\r\n        # Calculate total number of pages\r\n        total_pages = (len(asset_tags) + rows_per_page * columns_per_page - 1) // (rows_per_page * columns_per_page)\r\n\r\n        # Loop through each page\r\n        for page_num in range(total_pages):\r\n            # Calculate starting index and ending index for asset tags on this page\r\n            start_index = page_num * rows_per_page * columns_per_page\r\n            end_index = min((page_num + 1) * rows_per_page * columns_per_page, len(asset_tags))\r\n\r\n            # Generate QR codes for the asset tags on this page\r\n            qr_code_paths = generate_qr_codes(asset_tags[start_index:end_index], qr_codes_folder)\r\n\r\n            # Loop through each row\r\n            for i in range(rows_per_page):\r\n                # Calculate starting Y-coordinate for the row\r\n                y_position = page_height - top_margin - (i + 1) * (label_height + vertical_spacing)\r\n\r\n                # Loop through each column\r\n                for j in range(columns_per_page):\r\n                    # Calculate starting X-coordinate for the column\r\n                    x_position = left_margin + j * (label_width + horizontal_spacing)\r\n\r\n                    # Calculate index of the asset tag\r\n                    index = i * columns_per_page + j\r\n\r\n                    # Check if index is within the range of asset tags\r\n                    if index < end_index - start_index:\r\n                        # Get the asset tag\r\n                        asset_tag = asset_tags[start_index:end_index][index]\r\n\r\n                        # Truncate the asset tag if it's longer than 20 characters\r\n                        asset_tag = asset_tag[:20]\r\n\r\n                        # Split the asset tag into two rows if it's longer than 10 characters\r\n                        if len(asset_tag) > 10:\r\n                            asset_tag_row1 = asset_tag[:10]\r\n                            asset_tag_row2 = asset_tag[10:]\r\n                        else:\r\n                            asset_tag_row1 = asset_tag\r\n                            asset_tag_row2 = \"\"\r\n\r\n                        # Draw asset tag text with 50% smaller font size\r\n                        c.setFont(\"Helvetica\", 10)  # Set font size to 10\r\n\r\n                        if asset_tag_row2 == \"\":\r\n                            c.drawString(x_position + 2 * mm, y_position + label_height / 2 - 1 * mm, asset_tag)  # Adjusted position\r\n                        else:\r\n                            c.setFont(\"Helvetica\", 9)\r\n                            c.drawString(x_position + 2 * mm, y_position + label_height / 2 + 1 * mm, asset_tag_row1)  # Draw first row\r\n                            c.drawString(x_position + 2 * mm, y_position + label_height / 3 - 0.5 * mm, asset_tag_row2)  # Draw second row    \r\n\r\n                        # Draw QR code with adjusted position and size\r\n                        c.drawImage(qr_code_paths[index], x_position + 39 * mm / 2 - qr_size / 2 + 10 * mm,  # Adjusted position\r\n                                    y_position + label_height / 2 - qr_size / 2, \r\n                                    width=qr_size, height=qr_size)\r\n\r\n            # Add a new page if there are more pages remaining\r\n            if page_num < total_pages - 1:\r\n                c.showPage()\r\n\r\n        # Save the PDF file\r\n        c.save()\r\n\r\n        return {\"result\": \"PDF with QR codes and asset tags generated successfully.\"}\r\n\r\n    except Exception as e:\r\n        return {\"result\": f\"Error: {str(e)}\"}\r\n\r\n\r\ndef generate_qr_codes(asset_tags, qr_codes_folder):\r\n    \r\n    #Generate QR codes for asset tags and save them in the specified folder.\r\n    \r\n    qr_code_paths = []\r\n    for asset_tag in asset_tags:\r\n        qr_code_path = os.path.join(qr_codes_folder, f\"{asset_tag}.png\")\r\n        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)\r\n        qr.add_data(asset_tag)\r\n        qr.make(fit=True)\r\n        img = qr.make_image(fill_color=\"black\", back_color=\"white\")\r\n        img.save(qr_code_path)\r\n        qr_code_paths.append(qr_code_path)\r\n    return qr_code_paths"
  outputs:
    - result
    - generated_pdf
  results:
    - FAILURE: "${generated_pdf == 'False'}"
    - SUCCESS
