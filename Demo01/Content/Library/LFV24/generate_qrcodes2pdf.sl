namespace: LFV24
operation:
  name: generate_qrcodes2pdf
  inputs:
    - asset_tags_str
    - pdf_output_path
    - max_barcodes_per_page
  python_action:
    use_jython: false
    script: "import os\r\nfrom reportlab.lib.pagesizes import letter\r\nfrom reportlab.pdfgen import canvas\r\nimport json\r\nimport qrcode\r\n\r\ndef execute(asset_tags_str, pdf_output_path, max_barcodes_per_page):\r\n    try:\r\n        # Parse the JSON string to extract the asset tags list\r\n        asset_tags = json.loads(asset_tags_str)\r\n\r\n        # Create a temporary directory for storing QR code images\r\n        temp_dir = os.path.join(os.path.dirname(pdf_output_path), 'qr_code_temp')\r\n        os.makedirs(temp_dir, exist_ok=True)\r\n\r\n        # Generate QR code images for each asset tag\r\n        qr_code_paths = []\r\n        for tag in asset_tags:\r\n            qr_code_path = os.path.join(temp_dir, f'{tag}.png')\r\n            qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)\r\n            qr.add_data(tag)\r\n            qr.make(fit=True)\r\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\r\n            img.save(qr_code_path)\r\n            qr_code_paths.append(qr_code_path)\r\n\r\n        # Create the PDF file and add QR codes to it\r\n        c = canvas.Canvas(pdf_output_path, pagesize=letter)\r\n        x_offset = 200  # X-coordinate offset for placing QR codes\r\n        y_offset = 580  # Initial Y-coordinate offset for placing QR codes\r\n        qr_code_size = 200  # Size of each QR code image\r\n        vertical_spacing = 250  # Vertical spacing between QR codes\r\n\r\n        if int(max_barcodes_per_page) > 3:\r\n            max_barcodes_per_page = 3\r\n\r\n        # Loop through each QR code path\r\n        for idx, qr_code_path in enumerate(qr_code_paths, start=1):\r\n            # Calculate coordinates to place the QR code on the page\r\n            x_position = x_offset\r\n            y_position = y_offset - ((idx - 1) % int(max_barcodes_per_page)) * vertical_spacing\r\n\r\n            # Draw the QR code on the canvas\r\n            c.drawImage(qr_code_path, x_position, y_position, width=qr_code_size, height=qr_code_size)\r\n\r\n            # Draw the asset tag string under the QR code\r\n            asset_tag = os.path.splitext(os.path.basename(qr_code_path))[0]  # Get the asset tag from the file name\r\n            c.drawString(x_position + 65, y_position, asset_tag)  # Adjust the Y-coordinate for positioning\r\n\r\n            # Check if it's time to move to the next page\r\n            if idx % int(max_barcodes_per_page) == 0:\r\n                c.showPage()  # Insert page break\r\n                \r\n        # Save the PDF file\r\n        c.save()\r\n\r\n        # Remove temporary QR code images\r\n        for qr_code_path in qr_code_paths:\r\n            os.remove(qr_code_path)\r\n\r\n        return {\"result\": \"PDF with QR codes and asset tags generated successfully.\"}\r\n\r\n    except Exception as e:\r\n        return {\"result\": f\"Error: {str(e)}\"}"
  outputs:
    - result
  results:
    - SUCCESS
